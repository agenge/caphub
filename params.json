{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Generate centralized capistrano skeleton for multiple deployment","body":"<img src=\"https://github.com/railsware/caphub/raw/master/caphub.png\" style=\"float:right\" />\r\n\r\n## Caphub\r\n\r\nGenerate centralized capistrano skeleton for multiple deployment.\r\n\r\n## Caphub Concept\r\n\r\nMain idea of caphub is separate deployment and application code. So instead of `capify` your each project create **one** caphub repository and put **all** configurations/recipes there.\r\n\r\nBenefits:\r\n\r\n* no deployment/application code mix.\r\n* all deployment located in place.\r\n* ability to deploy multiple projects\r\n* deployment is not limited application deployment - deploy your system configurations too! (nginx/haproxy/etc configs)\r\n* easy to share configurations/recipes among multiple deployment.\r\n* uptodate synchronizing with remote repository (with capistrano-uptodate).\r\n* generate layout with caphub or write it yourself from scratch with your own recipes\r\n\r\n## Description\r\n\r\nCaphub is simple generation tool that follows *caphub concept*.\r\n\r\nCaphub generates similar layout that does usual `capify` command.\r\nCore of caphub skeleton is [capistrano-multiconfig](https://github.com/railsware/capistrano-multiconfig) gem that allows to recursively build multiple configurations. \r\n\r\nAnother included gems are optional but might be useful:\r\n\r\n* [capistrano_colors](https://github.com/stjernstrom/capistrano_colors)\r\n* [capistrano-uptodate](https://github.com/railsware/capistrano-uptodate#readme)\r\n* [capistrano-patch](https://github.com/railsware/capistrano-patch#readme)\r\n* [capistrano-calendar](https://github.com/railsware/capistrano-calendar#readme)\r\n\r\n## Installation\r\n\r\n    $ gem install caphub\r\n\r\n## Usage\r\n\r\nGenerate caphub layout:\r\n\r\n    $ caphub my-deploy\r\n\r\n    Creating directory my-deploy\r\n    Creating capistrano skeleton in my-deploy\r\n    Initializating git repository in my-deploy\r\n\r\nLayout example:\r\n\r\n    $ tree --dirsfirst my-deploy\r\n    my-deploy\r\n    ├── config\r\n    │   ├── deploy\r\n    │   └── deploy.rb\r\n    ├── recipes\r\n    ├── Capfile\r\n    ├── Gemfile\r\n    └── Gemfile.lock\r\n\r\nReview gems into `Gemfile` and initialize gems:\r\n\r\n    $ bundle install\r\n\r\nPush repository remote server:\r\n\r\n    git remote add origin your/remote/git/repo/url\r\n    git push -u origin master\r\n\r\n### Configurations\r\n\r\nPut own configuration in `config/deploy`. \r\n\r\nE.g create `config/deploy/blog/production.rb` and it will be automatically available:\r\n\r\n    $ bundle exec cap -T\r\n    cap blog:production      # Load blog:production configuration\r\n\r\nUse any recipe with configuration task (similar to multistage extension). E.g:\r\n\r\n    $ bundle exec cap blog:production deploy:setup\r\n\r\n### Recipes\r\n\r\nAdd gems that contains capistrano recipes to `Gemfile`.\r\n\r\nConfigure and require recipes into `Capfile`.\r\n\r\nPut own recipes to `recipes` directory.\r\n\r\n## References\r\n\r\n* [capistrano](https://github.com/capistrano/capistrano)\r\n* [capistrano-ext](https://github.com/capistrano/capistrano-ext)\r\n* [capistrano_colors](https://github.com/stjernstrom/capistrano_colors)\r\n* [capistrano-multiconfig](https://github.com/railsware/capistrano-multiconfig)\r\n* [capistrano-uptodate](https://github.com/railsware/capistrano-uptodate#readme)\r\n* [capistrano-patch](https://github.com/railsware/capistrano-patch#readme)\r\n* [capistrano-calendar](https://github.com/railsware/capistrano-calendar#readme)\r\n\r\n","google":"","name":"Caphub"}